/*
 * FarmTech Solutions - Sistema de Irriga√ß√£o Inteligente
 * Projeto: Monitoramento de Solo e Controle Autom√°tico de Irriga√ß√£o
 * 
 * Grupo:
 * MARINA CLARA CONSTANTINO RIBEIRO RM568576
 * YASMIN KAUANE SILVA LIMA RM566645
 * GABRIEL COPPOLA RM568044
 *
 * Descri√ß√£o:
 * Este sistema monitora os n√≠veis de nutrientes (N, P, K), pH do solo (simulado via LDR),
 * umidade e temperatura do solo (via DHT22) para controlar automaticamente uma bomba d'√°gua.
 * 
 * Cultura Agr√≠cola Escolhida: TOMATE
 * Requisitos do Tomate:
 * - pH ideal: 6.0 a 7.0
 * - Umidade do solo: 60% a 80%
 * - Necessita de NPK balanceado para crescimento adequado
 * 
 * L√≥gica de Irriga√ß√£o:
 * A bomba d'√°gua √© LIGADA quando:
 * - Umidade < 60% E pH fora da faixa ideal (6.0-7.0)
 * - OU quando umidade < 50% (emerg√™ncia)
 * 
 * A bomba d'√°gua √© DESLIGADA quando:
 * - Umidade > 80% (solo saturado)
 * - OU quando umidade est√° adequada (60-80%) E pH est√° ideal (6.0-7.0)
 */

#include "DHT.h"

// ==================== DEFINI√á√ÉO DE PINOS ====================
const int botaoN = 2;   // Bot√£o Nitrog√™nio (GPIO 2)
const int botaoP = 15;  // Bot√£o F√≥sforo (GPIO 15)
const int botaoK = 4;   // Bot√£o Pot√°ssio (GPIO 4)
const int pinoLDR = 34; // Sensor de pH simulado (LDR - GPIO 34)
const int pinoDHT = 27; // Sensor DHT22 - Umidade e Temperatura (GPIO 27)
const int pinoRele = 32; // Rel√© - Bomba d'√°gua (GPIO 32)

// ==================== CONFIGURA√á√ïES DOS SENSORES ====================
DHT dht(pinoDHT, DHT22);

// ==================== VARI√ÅVEIS GLOBAIS ====================
bool nivelN = false;  // N√≠vel de Nitrog√™nio
bool nivelP = false;  // N√≠vel de F√≥sforo
bool nivelK = false;  // N√≠vel de Pot√°ssio
float pH = 7.0;       // pH do solo
float umidade = 0.0;  // Umidade do solo (%)
float temperatura = 0.0; // Temperatura do solo (¬∞C)
bool bombaLigada = false; // Estado da bomba d'√°gua

// ==================== PAR√ÇMETROS DA CULTURA (TOMATE) ====================
const float pH_MIN_IDEAL = 6.0;
const float pH_MAX_IDEAL = 7.0;
const float UMIDADE_MIN_IDEAL = 60.0;
const float UMIDADE_MAX_IDEAL = 80.0;
const float UMIDADE_CRITICA = 50.0;

// ==================== FUN√á√ÉO: SETUP ====================
void setup() {
  Serial.begin(115200);
  Serial.println("\n====================================");
  Serial.println("FarmTech Solutions - Sistema Iniciado");
  Serial.println("Cultura: TOMATE");
  Serial.println("====================================\n");
  
  // Configura√ß√£o dos bot√µes (pull-up interno)
  pinMode(botaoN, INPUT_PULLUP);
  pinMode(botaoP, INPUT_PULLUP);
  pinMode(botaoK, INPUT_PULLUP);
  
  // Configura√ß√£o do LDR (entrada anal√≥gica)
  pinMode(pinoLDR, INPUT);
  
  // Configura√ß√£o do Rel√© (sa√≠da digital)
  pinMode(pinoRele, OUTPUT);
  digitalWrite(pinoRele, LOW); // Bomba inicia desligada
  
  // Inicializa√ß√£o do sensor DHT22
  dht.begin();
  
  delay(2000); // Aguarda estabiliza√ß√£o dos sensores
}

// ==================== FUN√á√ÉO: LER NUTRIENTES (NPK) ====================
void lerNutrientes() {
  nivelN = !digitalRead(botaoN); // Invertido por causa do pull-up
  nivelP = !digitalRead(botaoP);
  nivelK = !digitalRead(botaoK);
}

// ==================== FUN√á√ÉO: CALCULAR pH ====================
void calcularPH() {
  int valorLDR = analogRead(pinoLDR);
  
  // Converte LDR para escala de pH (0-14)
  // Valor ADC de 0-4095 mapeado para pH 0-14
  pH = (valorLDR / 4095.0) * 14.0;
  
  // Ajustes baseados nos nutrientes NPK
  // Nitrog√™nio tende a aumentar pH
  if (nivelN) {
    pH += 0.5;
  }
  
  // F√≥sforo tende a diminuir pH levemente
  if (nivelP) {
    pH -= 0.3;
  }
  
  // Pot√°ssio tende a aumentar pH levemente
  if (nivelK) {
    pH += 0.2;
  }
  
  // Garante que pH esteja na faixa v√°lida (0-14)
  pH = constrain(pH, 0.0, 14.0);
}

// ==================== FUN√á√ÉO: LER UMIDADE E TEMPERATURA ====================
bool lerUmidadeTemperatura() {
  umidade = dht.readHumidity();
  temperatura = dht.readTemperature();
  
  // Verifica se a leitura foi bem-sucedida
  if (isnan(umidade) || isnan(temperatura)) {
    Serial.println("‚ùå ERRO: Falha na leitura do DHT22!");
    return false;
  }
  return true;
}

// ==================== FUN√á√ÉO: CONTROLAR IRRIGA√á√ÉO ====================
void controlarIrrigacao() {
  bool deveIrrigar = false;
  String motivo = "";
  
  // REGRA 1: Umidade cr√≠tica (< 50%) - EMERG√äNCIA
  if (umidade < UMIDADE_CRITICA) {
    deveIrrigar = true;
    motivo = "Umidade cr√≠tica (< 50%)";
  }
  
  // REGRA 2: Umidade baixa E pH fora do ideal
  else if (umidade < UMIDADE_MIN_IDEAL && (pH < pH_MIN_IDEAL || pH > pH_MAX_IDEAL)) {
    deveIrrigar = true;
    motivo = "Umidade baixa E pH inadequado";
  }
  
  // REGRA 3: Solo saturado (> 80%) - DESLIGAR
  else if (umidade > UMIDADE_MAX_IDEAL) {
    deveIrrigar = false;
    motivo = "Solo saturado (> 80%)";
  }
  
  // REGRA 4: Condi√ß√µes ideais - DESLIGAR
  else if (umidade >= UMIDADE_MIN_IDEAL && umidade <= UMIDADE_MAX_IDEAL && 
           pH >= pH_MIN_IDEAL && pH <= pH_MAX_IDEAL) {
    deveIrrigar = false;
    motivo = "Condi√ß√µes ideais para tomate";
  }
  
  // Atualiza estado da bomba
  if (deveIrrigar) {
    digitalWrite(pinoRele, HIGH);
    if (!bombaLigada) {
      Serial.println("\nüö∞ ========== BOMBA LIGADA ==========");
      Serial.println("Motivo: " + motivo);
      bombaLigada = true;
    }
  } else {
    digitalWrite(pinoRele, LOW);
    if (bombaLigada) {
      Serial.println("\nüõë ========== BOMBA DESLIGADA ==========");
      Serial.println("Motivo: " + motivo);
      bombaLigada = false;
    }
  }
}

// ==================== FUN√á√ÉO: EXIBIR DADOS NO MONITOR SERIAL ====================
void exibirDados() {
  Serial.println("\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
  Serial.println("‚îÇ    DADOS DO MONITORAMENTO DE SOLO     ‚îÇ");
  Serial.println("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
  
  // Nutrientes NPK
  Serial.println("\nüìä NUTRIENTES (NPK):");
  Serial.print("  Nitrog√™nio (N): ");
  Serial.println(nivelN ? "‚úÖ PRESENTE" : "‚ùå AUSENTE");
  Serial.print("  F√≥sforo (P):    ");
  Serial.println(nivelP ? "‚úÖ PRESENTE" : "‚ùå AUSENTE");
  Serial.print("  Pot√°ssio (K):   ");
  Serial.println(nivelK ? "‚úÖ PRESENTE" : "‚ùå AUSENTE");
  
  // pH do Solo
  Serial.println("\nüß™ pH DO SOLO:");
  Serial.print("  Valor: ");
  Serial.print(pH, 2);
  if (pH >= pH_MIN_IDEAL && pH <= pH_MAX_IDEAL) {
    Serial.println(" ‚úÖ IDEAL para tomate");
  } else if (pH < pH_MIN_IDEAL) {
    Serial.println(" ‚ö†Ô∏è √ÅCIDO demais (adicionar calc√°rio)");
  } else {
    Serial.println(" ‚ö†Ô∏è ALCALINO demais (adicionar enxofre)");
  }
  
  // Umidade e Temperatura
  Serial.println("\nüíß UMIDADE E TEMPERATURA:");
  Serial.print("  Umidade: ");
  Serial.print(umidade, 1);
  Serial.print("%");
  if (umidade < UMIDADE_CRITICA) {
    Serial.println(" üî¥ CR√çTICO");
  } else if (umidade < UMIDADE_MIN_IDEAL) {
    Serial.println(" üü° BAIXA");
  } else if (umidade > UMIDADE_MAX_IDEAL) {
    Serial.println(" üîµ ALTA");
  } else {
    Serial.println(" ‚úÖ IDEAL");
  }
  
  Serial.print("  Temperatura: ");
  Serial.print(temperatura, 1);
  Serial.println("¬∞C");
  
  // Estado da Bomba
  Serial.println("\nüö∞ SISTEMA DE IRRIGA√á√ÉO:");
  Serial.print("  Status: ");
  Serial.println(bombaLigada ? "üü¢ BOMBA LIGADA" : "‚ö™ BOMBA DESLIGADA");
  
  Serial.println("\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
}

// ==================== FUN√á√ÉO: LOOP PRINCIPAL ====================
void loop() {
  // 1. Ler estado dos bot√µes de nutrientes
  lerNutrientes();
  
  // 2. Calcular pH com base no LDR e nutrientes
  calcularPH();
  
  // 3. Ler umidade e temperatura do DHT22
  if (!lerUmidadeTemperatura()) {
    delay(2000);
    return; // Pula o ciclo se houver erro na leitura
  }
  
  // 4. Controlar sistema de irriga√ß√£o
  controlarIrrigacao();
  
  // 5. Exibir dados no monitor serial
  exibirDados();
  
  // 6. Aguardar antes da pr√≥xima leitura
  delay(3000); // 3 segundos entre leituras
}
